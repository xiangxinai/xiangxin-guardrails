{
  "common": {
    "confirm": "Confirm",
    "cancel": "Cancel",
    "save": "Save",
    "delete": "Delete",
    "edit": "Edit",
    "add": "Add",
    "search": "Search",
    "reset": "Reset",
    "submit": "Submit",
    "back": "Back",
    "next": "Next",
    "loading": "Loading...",
    "success": "Success",
    "error": "Error",
    "warning": "Warning",
    "info": "Info",
    "create": "Create",
    "update": "Update",
    "view": "View",
    "download": "Download",
    "upload": "Upload",
    "export": "Export",
    "import": "Import",
    "refresh": "Refresh",
    "close": "Close",
    "yes": "Yes",
    "no": "No",
    "all": "All",
    "none": "None",
    "actions": "Actions",
    "name": "Name",
    "description": "Description",
    "status": "Status",
    "enabled": "Enabled",
    "disabled": "Disabled",
    "createdAt": "Created At",
    "updatedAt": "Updated At",
    "operation": "Operation"
  },
  "risk": {
    "level": {
      "no_risk": "No Risk",
      "low_risk": "Low Risk",
      "medium_risk": "Medium Risk",
      "high_risk": "High Risk"
    }
  },
  "action": {
    "pass": "Pass",
    "reject": "Reject",
    "replace": "Replace",
    "block": "Block",
    "allow": "Allow"
  },
  "sensitivity": {
    "high": "High",
    "medium": "Medium",
    "low": "Low"
  },
  "category": {
    "S1": "General Political Topics",
    "S2": "Sensitive Political Topics",
    "S3": "Damage to National Image",
    "S4": "Harm to Minors",
    "S5": "Violent Crime",
    "S6": "Illegal Activities",
    "S7": "Pornography",
    "S8": "Discriminatory Content",
    "S9": "Prompt Injection",
    "S10": "Insults",
    "S11": "Privacy Violation",
    "S12": "Business Violations"
  },
  "nav": {
    "dashboard": "Dashboard",
    "onlineTest": "Online Test",
    "results": "Detection Results",
    "reports": "Risk Reports",
    "config": "Protection Config",
    "dataSecurity": "Data Security",
    "account": "Account",
    "admin": "Admin",
    "logout": "Logout"
  },
  "dashboard": {
    "title": "System Overview",
    "totalRequests": "Total Detections",
    "securityRisks": "Security Risks Detected",
    "complianceRisks": "Compliance Risks Detected",
    "dataLeaks": "Data Leaks Detected",
    "riskDistribution": "Risk Level Distribution",
    "dailyTrends": "Detection Trends (Last 7 Days)",
    "totalRisks": "Total Risk Detections",
    "safePassed": "Safe Passed",
    "blockRate": "Block Rate",
    "highRisk": "High Risk",
    "mediumRisk": "Medium Risk",
    "lowRisk": "Low Risk",
    "noRisk": "Safe Passed",
    "riskLevel": "Risk Level",
    "totalDetections": "Total Detections",
    "times": "times",
    "error": "Error",
    "errorFetchingStats": "Failed to fetch statistics",
    "retry": "Retry"
  },
  "onlineTest": {
    "title": "Online Test",
    "description": "Test the detection capabilities of Xiangxin AI Guardrails. Guardrail detection is fully independent and does not require proxy model configuration. For single questions, you can optionally configure proxy models to compare original responses with guardrail protection effects; for Q&A pairs, only guardrail detection is performed.",
    "testInput": "Test Input",
    "singleQuestion": "Single Question",
    "qaPair": "Q&A Pair",
    "manageProxyModels": "Manage Proxy Models",
    "questionPlaceholder": "Enter the question to test (optional, you can upload images only)...",
    "qaPairPlaceholder": "Enter Q&A pair in the following format:\nQ: Your question\nA: Model's answer",
    "imageDetectionOptional": "Image Detection (Optional)",
    "selectTestModels": "Select test proxy models (optional):",
    "noProxyModels": "No proxy models available",
    "noProxyModelsDesc": "To compare tests, please add proxy model configurations in Protection Config. Does not affect guardrail detection functionality.",
    "protectionConfig": "Protection Config",
    "selectedModels": "{{count}} proxy models selected for testing",
    "runTest": "Run Test",
    "clear": "Clear",
    "testResult": "Test Result",
    "guardrailResult": "üõ°Ô∏è Guardrail Detection Result",
    "detectionFailed": "Detection Failed",
    "failureReason": "Failure Reason:",
    "securityRisk": "Security Risk",
    "riskLevel": "Risk Level:",
    "riskCategory": "Risk Category:",
    "complianceRisk": "Compliance Risk",
    "dataLeak": "Data Leak",
    "overallRiskLevel": "Overall Risk Level:",
    "suggestedAction": "Suggested Action:",
    "suggestedAnswer": "Suggested Answer:",
    "proxyModelOriginalResponse": "üîì Proxy Model Original Response",
    "proxyModelOriginalResponseDesc": "The following is the direct response from the proxy model without guardrail blocking, for comparison testing only",
    "originalResponse": "Original Response:",
    "proxyModelProtectedResponse": "ü§ñ Proxy Model Guardrail Protected Response",
    "modelResponse": "Model Response:",
    "presetTestCases": "Preset Test Cases",
    "testCaseLoaded": "Test case loaded: {{name}}",
    "promptAttackExample": "Prompt Injection Example",
    "promptAttackExampleDesc": "Typical prompt injection attack attempt",
    "violentCrimeContent": "Violent Crime Content",
    "violentCrimeContentDesc": "Content involving violent crime",
    "sensitivePoliticalTopic": "Sensitive Political Topic",
    "sensitivePoliticalTopicDesc": "Content involving sensitive political topics",
    "pornographicContent": "Pornographic Content",
    "pornographicContentDesc": "Content containing pornography",
    "discriminatoryContent": "Discriminatory Content",
    "discriminatoryContentDesc": "Content containing racial discrimination",
    "dataLeakIdentity": "Data Leak - Identity Information",
    "dataLeakIdentityDesc": "Sensitive data containing ID card and phone numbers",
    "dataLeakBanking": "Data Leak - Banking Information",
    "dataLeakBankingDesc": "Sensitive data containing bank card numbers",
    "dataLeakEmail": "Data Leak - Email",
    "dataLeakEmailDesc": "Contains email address",
    "safeQaPair": "Safe Q&A Pair",
    "safeQaPairDesc": "Normal Q&A content",
    "expected": "Expected:",
    "qaPairFormatError": "Q&A pair format error, please use format: Q: question\\nA: answer",
    "testExecutionFailed": "Test execution failed",
    "apiAuthFailed": "API authentication failed, please check your API Key",
    "serverError": "Server internal error, please try again later or contact administrator",
    "testFailed": "Test Failed",
    "requestTimeout": "Request timeout, please check network connection or try again later",
    "pleaseEnterTestContent": "Please enter test content or upload images",
    "proxyModelHint": "Hint: You can configure proxy models below to compare model responses with guardrail protection effects",
    "imagesSelected": "{{count}} images selected",
    "emptyResponse": "Model returned empty response",
    "contentLength": "Content length: {{length}} characters",
    "includesImages": "Includes {{count}} images",
    "inputPlaceholder": "Enter text to detect...",
    "detectButton": "Detect",
    "result": "Detection Result",
    "examples": "Examples",
    "securityExample": "Security Examples",
    "complianceExample": "Compliance Examples",
    "dataLeakExample": "Data Leak Examples",
    "inputType": "Input Type",
    "question": "Question",
    "guardrailResult": "Guardrail Detection Result",
    "overallRisk": "Overall Risk Level",
    "suggestedAction": "Suggested Action",
    "suggestedAnswer": "Suggested Answer",
    "modelResponse": "Model Response",
    "originalResponse": "Original Response (Before Guardrail)",
    "testModels": "Test Models",
    "testModelsDescription": "Select models to test. These models will receive the same input and their responses will be compared.",
    "selectModel": "Select Model",
    "updateSelection": "Update Selection",
    "modelSelectionUpdated": "Model selection updated",
    "loadModelsFailed": "Failed to load proxy model list",
    "detectionFailed": "Detection failed",
    "pleaseEnterText": "Please enter text to detect",
    "uploadImage": "Upload Image",
    "imageDetection": "Image Detection",
    "imageRequired": "Image is required for image detection",
    "modelSettings": "Model Settings"
  },
  "results": {
    "title": "Detection Results",
    "requestId": "Request ID",
    "content": "Detection Content",
    "detectionContent": "Detection Content",
    "detectionTime": "Detection Time",
    "promptAttack": "Prompt Attack",
    "contentCompliance": "Content Compliance",
    "security": "Security",
    "compliance": "Compliance",
    "dataLeak": "Data Leak",
    "suggestedAction": "Suggested Action",
    "suggestedAnswer": "Suggested Answer",
    "action": "Action",
    "createdAt": "Created At",
    "filter": "Filter",
    "export": "Export",
    "riskLevel": "Risk Level",
    "resultType": "Result Type",
    "category": "Category",
    "dateRange": "Date Range",
    "startDate": "Start Date",
    "endDate": "End Date",
    "contentSearch": "Search Detection Content",
    "requestIdSearch": "Search Request ID",
    "searchPlaceholder": "Search content...",
    "requestIdPlaceholder": "Search request ID...",
    "viewDetails": "View Details",
    "details": "Details",
    "refresh": "Refresh",
    "detectionDetails": "Detection Result Details",
    "detectedCategories": "Detected Categories",
    "inputContent": "Input Content",
    "outputContent": "Output Content",
    "fullContent": "Full Content",
    "score": "Score",
    "images": "Images",
    "image": "Image",
    "imageCount": "{{count}} images",
    "imagesCount": "Images ({{count}})",
    "detectedImages": "Detected Images",
    "allCategories": "All Categories",
    "selectRiskLevel": "Select Risk Level",
    "selectResultType": "Select Result Type",
    "selectCategory": "Select Category",
    "inputDetection": "Input Detection",
    "outputDetection": "Output Detection",
    "sourceIP": "Source IP",
    "riskDetails": "Risk Details",
    "loadingDetails": "Loading detailed content...",
    "contentLengthChars": "Content length: {{length}} characters",
    "includesImages": "Includes {{count}} images",
    "paginationText": "Showing {{from}}-{{to}} of {{total}}",
    "selectCategory": "Select risk category"
  },
  "reports": {
    "title": "Risk Reports",
    "overview": "Report Overview",
    "dateRange": "Date Range",
    "startDate": "Start Date",
    "endDate": "End Date",
    "categoryDistribution": "Risk Category Distribution",
    "riskTrend": "Risk Trend",
    "riskTrendPeriod": "Risk Trend ({{from}} - {{to}})",
    "riskDetections": "Risk Detections",
    "riskCategory": "Risk Category",
    "errorFetchingReports": "Failed to fetch report data",
    "error": "Error",
    "retry": "Retry",
    "securityRisksDetected": "Security Risks Detected",
    "complianceRisksDetected": "Compliance Risks Detected",
    "dataLeaksDetected": "Data Leaks Detected",
    "times": "times",
    "noRiskCategoryData": "No risk category data available",
    "noTrendData": "No trend data available",
    "riskDetectionCount": "Risk Detection Count",
    "detectionDate": "Detection Date"
  },
  "config": {
    "title": "Protection Configuration",
    "blacklist": "Blacklist",
    "whitelist": "Whitelist",
    "riskType": "Risk Types",
    "template": "Answer Templates",
    "knowledge": "Knowledge Base",
    "sensitivity": "Sensitivity Threshold",
    "dataSecurity": "Data Leak Prevention",
    "data": {
      "title": "Data Leak Prevention",
      "description": "Identify and mask sensitive data using regular expressions to prevent leakage of personal/enterprise sensitive data when using large language models.",
      "descriptionHighlight": "regular expressions",
      "inputProtectionTitle": "Input Data Leak Prevention",
      "inputProtectionDesc": "Prevents users' sensitive data from being leaked to large language models, protecting users.",
      "enterpriseScenario": "For deployments in enterprises, this prevents internal data from being leaked to external large language models (most common scenario).",
      "publicServiceScenario": "For public service deployments, this prevents users' sensitive data from being provided to service deployment clients (less common scenario).",
      "outputProtectionTitle": "Output Data Leak Prevention",
      "outputProtectionDesc": "Prevents models from leaking sensitive data to users, protecting models and systems.",
      "outputEnterpriseScenario": "For enterprise deployments, this prevents internal data from being leaked to internal users.",
      "outputPublicServiceScenario": "For public service deployments, this prevents an organization's sensitive data from being provided to external users.",
      "entityManagementTitle": "Sensitive Entity Management",
      "entityManagementDesc": "Define sensitive data types using regular expressions and configure desensitization rules.",
      "types": "Types",
      "patterns": "Patterns",
      "levels": "Levels",
      "desensitization": "Desensitization",
      "actions": "Actions",
      "addType": "Add Type",
      "editType": "Edit Type",
      "deleteType": "Delete Type",
      "typeName": "Type Name",
      "typeDescription": "Type Description",
      "pattern": "Pattern",
      "sensitivityLevel": "Sensitivity Level",
      "low": "Low",
      "medium": "Medium",
      "high": "High",
      "desensitizationRules": "Desensitization Rules",
      "replace": "Replace",
      "mask": "Mask",
      "hash": "Hash",
      "encrypt": "Encrypt",
      "shuffle": "Shuffle",
      "random": "Random Replace",
      "placeholder": "Placeholder",
      "createEntitySuccess": "Sensitive entity created successfully",
      "updateEntitySuccess": "Sensitive entity updated successfully",
      "deleteEntitySuccess": "Sensitive entity deleted successfully",
      "fetchEntityFailed": "Failed to fetch sensitive entities",
      "deleteConfirm": "Are you sure you want to delete this sensitive entity definition?",
      "inputEntityName": "Please enter entity type name",
      "inputPattern": "Please enter regular expression pattern",
      "inputSensitivityLevel": "Please select sensitivity level",
      "invalidPattern": "Invalid regular expression pattern"
    }
  },
  "data": {
    "title": "Data Leak Prevention",
    "description": "Identify and mask sensitive data using regular expressions to prevent leakage of personal/enterprise sensitive data when using large language models.",
    "descriptionHighlight": "regular expressions",
    "inputProtectionTitle": "Input Data Leak Prevention",
    "inputProtectionDesc": "Prevents users' sensitive data from being leaked to large language models, protecting users.",
    "enterpriseScenario": "For deployments in enterprises, this prevents internal data from being leaked to external large language models (most common scenario).",
    "publicServiceScenario": "For public service deployments, this prevents users' sensitive data from being provided to service deployment clients (less common scenario).",
    "outputProtectionTitle": "Output Data Leak Prevention",
    "outputProtectionDesc": "Prevents models from leaking sensitive data to users, protecting models and systems.",
    "outputEnterpriseScenario": "For enterprise deployments, this prevents internal data from being leaked to internal users.",
    "outputPublicServiceScenario": "For public service deployments, this prevents an organization's sensitive data from being provided to external users.",
    "entityManagementTitle": "Sensitive Entity Management",
    "entityManagementDesc": "Define sensitive data types using regular expressions and configure desensitization rules.",
    "types": "Types",
    "patterns": "Patterns",
    "levels": "Levels",
    "desensitization": "Desensitization",
    "actions": "Actions",
    "addType": "Add Type",
    "editType": "Edit Type",
    "deleteType": "Delete Type",
    "typeName": "Type Name",
    "typeDescription": "Type Description",
    "pattern": "Pattern",
    "sensitivityLevel": "Sensitivity Level",
    "low": "Low",
    "medium": "Medium",
    "high": "High",
    "desensitizationRules": "Desensitization Rules",
    "replace": "Replace",
    "mask": "Mask",
    "hash": "Hash",
    "encrypt": "Encrypt",
    "shuffle": "Shuffle",
    "random": "Random Replace",
    "placeholder": "Placeholder",
    "createEntitySuccess": "Sensitive entity created successfully",
    "updateEntitySuccess": "Sensitive entity updated successfully",
    "deleteEntitySuccess": "Sensitive entity deleted successfully",
    "fetchEntityFailed": "Failed to fetch sensitive entities",
    "deleteConfirm": "Are you sure you want to delete this sensitive entity definition?",
    "inputEntityName": "Please enter entity type name",
    "inputPattern": "Please enter regular expression pattern",
    "inputSensitivityLevel": "Please select sensitivity level",
    "invalidPattern": "Invalid regular expression pattern"
  },
  "blacklist": {
    "title": "Blacklist Management",
    "description": "Keywords in blacklist will be directly marked as risky",
    "keyword": "Keyword",
    "addKeyword": "Add Keyword",
    "editKeyword": "Edit Keyword",
    "deleteConfirm": "Are you sure you want to delete this keyword?",
    "inputKeyword": "Please enter keyword",
    "addSuccess": "Keyword added successfully",
    "updateSuccess": "Keyword updated successfully",
    "deleteSuccess": "Keyword deleted successfully",
    "fetchFailed": "Failed to fetch blacklist"
  },
  "whitelist": {
    "title": "Whitelist Management",
    "description": "Keywords in whitelist will be directly marked as safe",
    "keyword": "Keyword",
    "addKeyword": "Add Keyword",
    "editKeyword": "Edit Keyword",
    "deleteConfirm": "Are you sure you want to delete this keyword?",
    "inputKeyword": "Please enter keyword",
    "addSuccess": "Keyword added successfully",
    "updateSuccess": "Keyword updated successfully",
    "deleteSuccess": "Keyword deleted successfully",
    "fetchFailed": "Failed to fetch whitelist"
  },
  "riskType": {
    "title": "Risk Type Configuration",
    "description": "Configure which risk categories to detect",
    "selectAll": "Select All",
    "deselectAll": "Deselect All",
    "categoryName": "Category Name",
    "saveSuccess": "Configuration saved successfully",
    "fetchFailed": "Failed to fetch configuration",
    "atLeastOne": "At least one risk category must be enabled",
    "loadConfigFailed": "Failed to load risk configuration",
    "currentEnabled": "Currently {{enabled}} of {{total}} risk categories are enabled",
    "itemCount": "{{count}} items"
  },
  "template": {
    "title": "Answer Template Management",
    "description": "Configure rejection answer templates for different risk categories",
    "addTemplate": "Add Template",
    "editTemplate": "Edit Template",
    "categoryName": "Category Name",
    "templateContent": "Template Content",
    "inputCategory": "Please enter category name",
    "inputTemplate": "Please enter template content",
    "deleteConfirm": "Are you sure you want to delete this template?",
    "addSuccess": "Template added successfully",
    "updateSuccess": "Template updated successfully",
    "deleteSuccess": "Template deleted successfully",
    "fetchFailed": "Failed to fetch templates"
  },
  "knowledge": {
    "title": "Knowledge Base Management",
    "description": "Upload knowledge base files for intelligent response generation",
    "uploadFile": "Upload File",
    "uploadSuccess": "File uploaded successfully",
    "uploadFailed": "File upload failed",
    "deleteConfirm": "Are you sure you want to delete this file?",
    "deleteSuccess": "File deleted successfully",
    "fetchFailed": "Failed to fetch knowledge base",
    "fileName": "File Name",
    "fileSize": "File Size",
    "uploadTime": "Upload Time",
    "questionId": "Question ID",
    "question": "Question",
    "answer": "Answer",
    "viewDetails": "View Details",
    "supportedFormats": "Supported formats: JSONL",
    "formatExample": "File format example: {\"questionid\": \"id\", \"question\": \"question\", \"answer\": \"answer\"}"
  },
  "sensitivity": {
    "title": "Sensitivity Threshold Configuration",
    "description": "Configure sensitivity levels and thresholds for risk detection",
    "currentLevel": "Current Sensitivity Level",
    "highThreshold": "High Sensitivity Threshold",
    "mediumThreshold": "Medium Sensitivity Threshold",
    "lowThreshold": "Low Sensitivity Threshold",
    "thresholdDescription": "Threshold range: 0.00 - 1.00 (confidence probability)",
    "highDesc": "Detect loosely, capture potential errors, control risk",
    "mediumDesc": "Balance accuracy and coverage",
    "lowDesc": "Detect strictly, extremely high accuracy, automated pipeline",
    "saveSuccess": "Configuration saved successfully",
    "fetchFailed": "Failed to fetch configuration",
    "invalidThreshold": "Threshold must be between 0.00 and 1.00",
    "thresholdOrder": "Thresholds must follow: High ‚â§ Medium ‚â§ Low"
  },
  "proxy": {
    "title": "Security Gateway Configuration",
    "description": "Configure upstream models for security gateway mode",
    "addModel": "Add Model",
    "editModel": "Edit Model",
    "configName": "Configuration Name",
    "apiBaseUrl": "API Base URL",
    "apiKey": "API Key",
    "modelName": "Model Name",
    "inputConfigName": "Please enter configuration name",
    "inputApiBaseUrl": "Please enter API base URL",
    "inputApiKey": "Please enter API key",
    "inputModelName": "Please enter model name",
    "deleteConfirm": "Are you sure you want to delete this model configuration?",
    "addSuccess": "Model added successfully",
    "updateSuccess": "Model updated successfully",
    "deleteSuccess": "Model deleted successfully",
    "fetchFailed": "Failed to fetch model configurations",
    "testConnection": "Test Connection",
    "testSuccess": "Connection test successful",
    "testFailed": "Connection test failed"
  },
  "banPolicy": {
    "title": "Ban Policy Configuration",
    "description": "Configure automatic ban policies based on user behavior",
    "enablePolicy": "Enable Ban Policy",
    "highRiskThreshold": "High Risk Threshold",
    "banDuration": "Ban Duration (minutes)",
    "thresholdDescription": "Automatically ban user if high-risk behavior exceeds this count within time window",
    "durationDescription": "Duration to ban the user",
    "saveSuccess": "Configuration saved successfully",
    "fetchFailed": "Failed to fetch configuration"
  },
  "dataSecurity": {
    "title": "Data Security",
    "entityTypes": "Entity Types",
    "detectionTest": "Detection Test",
    "results": "Detection Results",
    "inputDetection": "Input Detection",
    "outputDetection": "Output Detection",
    "anonymization": "Anonymization",
    "enableInputDetection": "Enable Input Detection",
    "enableOutputDetection": "Enable Output Detection",
    "inputDetectionDesc": "Detect sensitive data in user input to prevent leaking to the model",
    "outputDetectionDesc": "Detect sensitive data in model output to prevent leaking to users"
  },
  "entityType": {
    "title": "Entity Type Management",
    "description": "Configure sensitive data entity types and anonymization rules",
    "addEntityType": "Add Entity Type",
    "editEntityType": "Edit Entity Type",
    "entityName": "Entity Name",
    "recognitionPattern": "Recognition Pattern (Regex)",
    "sensitivityLevel": "Sensitivity Level",
    "anonymizationMethod": "Anonymization Method",
    "inputEntityName": "Please enter entity name",
    "inputPattern": "Please enter recognition pattern (regex)",
    "selectSensitivity": "Please select sensitivity level",
    "selectMethod": "Please select anonymization method",
    "deleteConfirm": "Are you sure you want to delete this entity type?",
    "addSuccess": "Entity type added successfully",
    "updateSuccess": "Entity type updated successfully",
    "deleteSuccess": "Entity type deleted successfully",
    "fetchFailed": "Failed to fetch entity types",
    "methods": {
      "replace": "Replace - Replace with placeholder",
      "mask": "Mask - Partial masking",
      "hash": "Hash - SHA256 hash",
      "encrypt": "Encrypt - Encryption",
      "shuffle": "Shuffle - Character reordering",
      "random": "Random - Random replacement"
    },
    "example": "Example",
    "testPattern": "Test Pattern",
    "testText": "Test Text",
    "testResult": "Test Result",
    "matched": "Matched",
    "notMatched": "Not Matched"
  },
  "account": {
    "title": "Account Management",
    "email": "Email",
    "tenantUuid": "Tenant UUID",
    "currentApiKey": "Current API Key",
    "apiRateLimit": "API Rate Limit",
    "rateLimitValue": "{{limit}} requests/min",
    "unlimited": "Unlimited",
    "copy": "Copy",
    "regenerate": "Regenerate",
    "copied": "Copied to clipboard",
    "uuidCopied": "UUID copied to clipboard",
    "copyFailed": "Copy failed",
    "apiKeyUpdated": "API Key updated",
    "operationFailed": "Operation failed",
    "regenerateWarning": "Note: Old API Key will be invalidated immediately after regeneration.",
    "uuidNote": "Note: UUID is your unique user identifier.",
    "apiDocumentation": "API Documentation",
    "quickStart": "Quick Start",
    "apiReference": "API Reference",
    "sdkIntegration": "SDK Integration",
    "examples": "Examples",
    "contactSupport": "Contact Support",
    "supportEmail": "Support Email",
    "fetchUserInfoFailed": "Failed to fetch user information",
    "fetchSystemInfoFailed": "Failed to fetch system information"
  },
  "admin": {
    "title": "Admin Panel",
    "userManagement": "User Management",
    "rateLimitManagement": "Rate Limit Management",
    "systemSettings": "System Settings"
  },
  "userManagement": {
    "title": "User Management",
    "email": "Email",
    "apiKey": "API Key",
    "rateLimit": "Rate Limit",
    "createdAt": "Created At",
    "editRateLimit": "Edit Rate Limit",
    "inputRateLimit": "Please enter rate limit",
    "rateLimitDesc": "Requests per minute, 0 means unlimited",
    "updateSuccess": "Rate limit updated successfully",
    "fetchFailed": "Failed to fetch user list"
  },
  "rateLimit": {
    "title": "Rate Limit Management",
    "description": "Configure API rate limits for users",
    "defaultLimit": "Default Rate Limit",
    "defaultLimitDesc": "Default rate limit for new users (requests/min)",
    "saveSuccess": "Configuration saved successfully",
    "fetchFailed": "Failed to fetch configuration"
  },
  "login": {
    "title": "Xiangxin AI Guardrails",
    "subtitle": "Account Login",
    "email": "Email Address",
    "emailPlaceholder": "Email Address",
    "password": "Password",
    "passwordPlaceholder": "Password",
    "loginButton": "Login",
    "loginSuccess": "Login successful",
    "loginFailed": "Login failed, please check your email and password",
    "emailRequired": "Please enter your email",
    "emailInvalid": "Please enter a valid email address",
    "passwordRequired": "Please enter your password",
    "accountNotActivated": "Account needs verification",
    "accountNotActivatedDesc": "Your account {{email}} has not been verified yet.",
    "goToVerifyPage": "Go to verification page",
    "closeReminder": "Close reminder",
    "noAccount": "Don't have an account?",
    "registerNow": "Register Now",
    "needVerifyEmail": "Need to verify email?",
    "verifyPage": "Verification Page",
    "copyright": "¬© 2025 Xiangxin AI. All rights reserved."
  },
  "register": {
    "title": "Xiangxin AI Guardrails",
    "subtitle": "User Registration",
    "email": "Email Address",
    "emailPlaceholder": "Email Address",
    "password": "Password (at least 8 characters)",
    "passwordPlaceholder": "Password (at least 8 characters)",
    "confirmPassword": "Confirm Password",
    "confirmPasswordPlaceholder": "Confirm Password",
    "verificationCode": "Verification Code",
    "verificationCodePlaceholder": "6-digit verification code",
    "registerButton": "Register Account",
    "verifyButton": "Verify Email",
    "registerSuccess": "Registration successful! Please check your email for the verification code.",
    "registerFailed": "Registration failed",
    "verifySuccess": "Email verified successfully! Redirecting to login page...",
    "verifyFailed": "Verification failed",
    "emailRequired": "Please enter your email address",
    "emailInvalid": "Please enter a valid email address",
    "passwordRequired": "Please enter your password",
    "passwordMinLength": "Password must be at least 8 characters",
    "confirmPasswordRequired": "Please confirm your password",
    "passwordMismatch": "Passwords do not match",
    "verificationCodeRequired": "Please enter verification code",
    "verificationCodeLength": "Verification code must be 6 digits",
    "verificationCodeSentTo": "Verification code sent to",
    "verifyLaterNote": "You can also complete verification later on the",
    "verifyLaterLink": "Verification Page",
    "resendCodeQuestion": "Didn't receive the code?",
    "resendCode": "Resend verification code",
    "resendCodeCountdown": "Resend ({{count}}s)",
    "resendCodeSuccess": "Verification code has been resent! Please check your email.",
    "backToRegister": "Back to registration",
    "alreadyHaveAccount": "Already have an account?",
    "loginNow": "Login",
    "stepFillInfo": "Fill Information",
    "stepFillInfoDesc": "Enter email and password",
    "stepVerifyEmail": "Email Verification",
    "stepVerifyEmailDesc": "Verify email address",
    "copyright": "¬© 2025 Xiangxin AI. All rights reserved."
  },
  "verify": {
    "title": "Email Verification",
    "emailPlaceholder": "Email Address",
    "verificationCodePlaceholder": "6-digit verification code",
    "verifyButton": "Verify Email",
    "resendCode": "Resend Code",
    "resendCodeCountdown": "Resend ({{count}}s)",
    "verifySuccess": "Email verified successfully! Redirecting to login page...",
    "verifyFailed": "Verification failed",
    "resendSuccess": "Verification code has been resent",
    "resendFailed": "Failed to resend verification code",
    "emailRequired": "Please enter your email address",
    "emailInvalid": "Please enter a valid email address",
    "verificationCodeRequired": "Please enter verification code",
    "verificationCodeLength": "Verification code must be 6 digits"
  }
},
  "riskTypeCategories": {
    "s1": "General Political Topics",
    "s2": "Sensitive Political Topics",
    "s3": "Disrespect to National Leaders",
    "s4": "Harm to Minors",
    "s5": "Violent Crimes",
    "s6": "Illegal Activities",
    "s7": "Pornography",
    "s8": "Discriminatory Content",
    "s9": "Prompt Attacks",
    "s10": "Profanity",
    "s11": "Privacy Violations",
    "s12": "Commercial Violations"
  }
}
